1、创建shell脚本时，必须在文件的首行指定要使用的shell。其格式为：
    #！ /bin/bash
	
2、引用一个变量时需要使用美元符，而引用变量来对进行赋值时，则不要使用美元符；没有美元符，shell会将变量名解释成普通的文本字符串
    eg：
        a=10;b=$a
		
3、命令替换（可从命令输出中提取信息，并将其赋值给变量）：
    方法1：反引号字符（a=`date`）,不建议使用
    方法2：$()格式（a=$(date)）
	
4、截取字符串
    （1）获取字符串长度：${#var}
    （2）使用#和##获取尾部子字符串：
        1）#：最小限度从前面截取word（从左往右），格式：${param#word}
            eg：
				a="123/456/789" 
                b=${a#*/}
                echo ${b}        # 456/789
		2)##：最大限度从前面截取word（从左往右），格式：${param##word}
            eg：
				a="123/456/789"
                b=${a##*/}
                echo ${b}        # 789
    （3）使用%和%%获取头部子字符串
        1）%：最小限度从后面截取word（从右往左），格式：${param%word}
        2）%%：最大限度从后面截取word（从右往左），格式：${param%%word}
    （4）使用${var:}模式获取子字符串
        1）指定从左边第几个字符开始以及子串中字符的个数，其中len值可省略，格式：${var:start:len}
            eg：
				a="123/456/789" 
                b=${a:0:7}  #其中0表示从左边第一个字符开始，7表示子字符的总个数
        2）从右边第几个字符开始以及字符的个数，其中len可省略，格式：${var:0-start:len}
            eg：
				a="123/456/789" 
                b=${a:0-3:3}    #789

5、输入、输出重定向
	输出重定向：
		>：将命令的输出重定向到文件中，若该文件已存在，新的文件数据会覆盖已有文件数据
		>>：追加内容到文件中
	输入重定向：
		<：导入数据

6、管道
	即将一个命令的输出作为另一个命令的输入，格式：command1 | command2
	
7、执行数学运算
	当将一个数学运算结果赋给某个变量时，可以用美元符+方括号（$[ operation]）将数学表达式围起来
		eg：
			a=$[ 1+5 ]
			echo $a    #6

8、查看退出状态码（echo $？）
    Linux退出状态码
		0		命令成功结束
		1		一般性未知错误
		2		不适合的shell命令
		126		命令不可执行
		127		没找到命令
		128		无效的退出参数
		128+x	与Linux信号x相关的严重错误
		130		通过Ctrl+C终止的命令
		255		正常范围之外的退出状态码
		
9、结构化命令
	1）使用if-then语句
		格式1：
			if command
			then 
				commands
			fi
		含义：bash shell的if语句会运行if后面的这个命令，若该命令的退出状态码为0，位于then部分的命令就会被执行；
		      若退出状态码不为0，则then之后的命令不会被执行。
		eg：
			#! /bin/bash
			if pwd
			then 
				echo "It worked"
			fi
		格式2：
			if command;then
				commands
			fi
			
	2）使用if-then-else语句
		格式：
			if command
			then
				commands
			else
				commands
			fi
		含义：当if语句中的命令返回退出状态码0时，then部分中的命令会被执行；当为非零状态码时，bash shell会执行else部分中的命令
		
	3）嵌套if
		格式：
			if command
			then
				commands
			else
				commands
				if command
				then
					commands
		注意：嵌套的if-then语句位于主if-then-else语句的else代码块中，但这种风格代码不易阅读，可采用下面这种格式：
			if command;then
				commands
			elif command;then
				commands
			else
				commands
			fi
		其中else语句可省略
		
	4）test命令
		test命令提供了在if-then语句中测试不同条件的途径。若test命令中列出的条件成立，test命令就会退出并返回退出状态码0；
		若条件不成立，test命令就会退出并返回非零的退出状态码，从而使得if-then语句不会被执行。
		
		格式1：test condition
		在if-then语句中，即：if test condition；then
								commands
							 fi
		格式2：if [ condition ]
			   then
				   commands
			   fi
			方括号定义了测试条件。注意，第一个 方括号之后和第二个方括号之前必须加上一个空格，否则就会报错
			
		test命令可以判断三类条件：
			1）数值比较
				n1 -eq n2   :	检查n1是否与n2相等
				n1 -ge n2	:	检查n1是否大于或等于n2
				n1 -gt n2	:	检查n1是否大于n2
				n1 -le n2   :	检查n1是否小于或等于n2
				n1 -lt n2   :	检查n1是否小于n2
				n1 -ne n2 	:	检查n1是否不等于n2
				eg：
					a=10
					if [ $a -ge 5 ];then
						echo 'Yes'
					fi
					# Yes
				
			2）字符串比较
				str1 = str2    :    检查str1是否和str2相同
				str1 != str2   :	检查str1是否和str2不同
				str1 < str2	   :	检查str1是否比str2小
				str1 > str2    :	检查str1是否比str2大
				-n str1		   :	检查str1的长度是否非0
				-z str1		   :	检查str1的长度是否为0
				注意：当进行字符串的大小比较的时候，大于号和小于号必须用“\”进行转义，否则shell会将他们当做重定向符号，将字符串值当做文件名；
					  其次，shell中字符串的排序是按照ASICC的排序，根据每个字符的ASICC数值来决定排序的。A：65；a：97；
					  ASICC编码详情：https://www.itdaan.com/blog/2012/07/10/f8b1339b6bc66804ae3cdc8fc059646d.html
				eg:
					#!/bin/bash
					var1=testing
					var2=""
					###
					if [ -n $var1 ];then
						echo "'$var1'不为空"
					else
						echo "'$var1'为空"
					fi
					# 'testing'不为空
					###
					if [ -n $var2 ];then
						echo "'$var2'不为空"
					else
						echo "'$var2'为空"
					fi
					# ''为空
					###
					if [ -n $var3 ];then
						echo "'$var3'不为空"
					else
						echo "'$var3'为空"
					fi
					# ''为空   
						（这个变量没有在shell中定义过，故其字符串长度为0，尽管它未被定义过）
				窍门：由于空的和未初始化的变量会对shell脚本测试造成灾难性的影响。如果不是很确定一个变量的内容，最好在将其用于数值或字符串比较
				      之前，先通过-n或-z来测试一下变量是否含有值。
				
			3）文件比较
				-d file			检查file是否存在并是一个目录
				-e file			检查file是否存在
				-f file			检查file是否存在并是一个文件
				-r file			检查file是否存在并可读
				-s file			检查file是否存在并非空
				-w file			检查file是否存在并可写
				-x file			检查file是否存在并可执行
				-O file			检查file是否存在并属当前用户所有
				-G file			检查file是否存在并且默认组与当前用户相同
				file1 -nt file2	检查file1是否比file2新
				file1 -ot file2	检查file1是否比file2旧
				
	5）复合条件测试
		if-then语句允许使用布尔逻辑来组合测试
			[ condition1 ] && [ condition2 ]		使用布尔AND布尔运算符来组合两个条件，只有两个条件都为True，then部分的命令才会执行；
			[ condition1 ] || [ condition2 ]		使用布尔OR布尔运算符来组合两个条件，只有任意一个条件都为True，then部分的命令就会执行；
			
	6）if-then高级特性
		1、使用双括号
			双括号命令允许在比较过程中使用高级数学表达式。test命令只能在比较中使用简单的算术操作；其格式如下：
				(( expression ))
			expression可以是任意的数学赋值或者比较表达式，除去test命令使用的标准数学运算符，双括号命令中常用运算符如下：
				val++			后增
				val--			后减
				++val			先增
				--val			先减
				！				逻辑求反
				~				位求反
				**				幂运算
				<<				左位移
				>>				右位移
				&				位布尔和
				|				位布尔或
				&&				逻辑和
				||				逻辑或
			注意：不需要对双括号中表达式里的大于号进行转义。
			eg：
				val1=10
				if (( val1 ** 2 > 90 ));then
					(( val2 = $val1 ** 2 ))
					echo $val2
				fi
				# 100
		
		2、使用双方括号
			双方括号命令提供了针对字符串比较的高级特性，格式如下：
				[[  expression ]]
					此处的expression使用了test命令中采用的标准字符串比较，但它提供了test命令未提供的另一个特性————模式匹配
				eg:
					#!/bin/bash
					a='rich'
					if [[ $a == r* ]];then
						echo 'Hello $a'
					else
						echo "Sorry"
					fi
					# "Hello rich"
				在以上脚本中，我们使用了双等号。双等号将右边的字符串（r*）视为一个模式，并应用模式匹配规则。
				双方括号命令$a变量进行匹配，看它是否以字母r开头，如果是则执行then部分的命令。
				
	7）case命令
		case命令会采用列表表格式来检查单个变量的多个值，格式如下：
			case $variable in
			pattern1 | pattern2) command1;;
			pattern3) command2;;
			*) default commands;;
			esac
		case命令会将指定的变量与不同模式进行比较。如果变量和模式是匹配的，那么shell会执行为该模式指定的命令。可通过竖线操作符在一行中分割出多个模式；
		*号会捕获所有与已知模式不匹配的值。
		eg：
			a="rich"
			case $a in
			rich | Rich)
				echo "Hello,$a";;
			Torres)
				echo "Hello,Torres";;
			Taolei)
				echo "Hello,Taolei";;
			*)
				echo "Sorry"
			esac
			# "Hello,rich"
			
	8）for命令
		格式：
			for var in list
			do
				commands
			done
		解读：
			在list参数中，需要准备迭代中需要用到的一系列值。可通过几种不同的方法指定列表中的值。在每次迭代中，变量var会包含列表中的当前值。第一次迭代
		会使用列表中的第一个值，第二次迭代使用第二个值，以此类推，指导列表中的所有值都过一遍。
			在do和done之间输入的命令可以是一条或多条标准的bash shell命令。在这些命令中，$var变量包含着这次迭代对应的当前列表项中的值。		
		eg：
			#读取列表中的值
			for test in Tao Lei Ray Torres;do
				echo The next state is $test
			done
			
			#
			The next state is Tao
			The next state is Lei
			The next state is Ray
			The next state is Torres
		每次for命令遍历列表，它都会将列表中的下个值赋给$test变量。$test变量可以像for命令语句中的其他脚本变量一样使用。在最后一次迭代后，$test变量的值会在
		shell脚本的剩余部分一直保持有效，它会一直保持最后一次迭代的值（除非修改其值）
			
	    
			
			
	